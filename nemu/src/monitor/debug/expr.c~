#include "nemu.h"

/* We use the POSIX regex functions to process regular expressions.
 * Type 'man regex' for more information about POSIX regex functions.
 */
#include <sys/types.h>
#include <regex.h>

enum symbol{
	NOTYPE = 256,'+','-','*','/','(',')',EQ,'N'

	/* TODO: Add more token types */

};

static struct rule {
	char *regex;
	int token_type;
} rules[] = {

	/* TODO: Add more rules.
	 * Pay attention to the precedence level of different rules.
	 */

	{" +",	NOTYPE},				// spaces
	{"\\+", '+'},				// plus
	{"-", '-'},
	{"\\*",'*'},
	{"/", '/'},
	{"\\(", '('},
	{")", ')'},
	{"==", EQ},						// equal
	{"[0-9]+",'N'}
};

#define NR_REGEX (sizeof(rules) / sizeof(rules[0]) )

static regex_t re[NR_REGEX];

/* Rules are used for many times.
 * Therefore we compile them only once before any usage.
 */
void init_regex() {
	int i;
	char error_msg[128];
	int ret;

	for(i = 0; i < NR_REGEX; i ++) {
		ret = regcomp(&re[i], rules[i].regex, REG_EXTENDED);
		if(ret != 0) {
			regerror(ret, &re[i], error_msg, 128);
			Assert(ret == 0, "regex compilation failed: %s\n%s", error_msg, rules[i].regex);
		}
	}
}

typedef struct token {
	int type;
	char str[64];
} Token;

Token tokens[32];
int nr_token;

static bool make_token(char *e) {
	int position = 0;
	int i,j;
	regmatch_t pmatch;
	
	nr_token = 0;

	while(e[position] != '\0') {
		/* Try all rules one by one. */
		for(i = 0; i < NR_REGEX; i ++) {
			if(regexec(&re[i], e + position, 1, &pmatch, 0) == 0 && pmatch.rm_so == 0) {
				char *substr_start = e + position;
				int substr_len = pmatch.rm_eo;

				Log("match rules[%d] = \"%s\" at position %d with len %d: %.*s", i, rules[i].regex, position, substr_len, substr_len, substr_start);
				

				/* TODO: Now a new token is recognized with rules[i]. Add codes
				 * to record the token in the array ``tokens''. For certain 
				 * types of tokens, some extra actions should be performed.
				 */
				tokens[nr_token].type=rules[i].token_type;
				for(j=0;j<substr_len;j++)
				{
					tokens[nr_token].str[j]=e[position+j];
				}
				tokens[nr_token].str[j]='\0';
				position += substr_len;
				switch(rules[i].token_type) {
					default: panic("please implement me");
				}
				nr_token++;
				break;
			}
		}

		if(i == NR_REGEX) {
			printf("no match at position %d\n%s\n%*.s^\n", position, e, position, "");
			return false;
		}
	}

	return true; 
}

bool check_parentheses(int p, int q)
{
	int i261=0,i262=0,i;
	for(i=p;i<q+1;i++)
	{
		if(tokens[i].type==261) i261++;
		if(tokens[i].type==262) i262++;
	}
	assert(i261==i262);
	i261=0;
	i262=0;
	i=p;
	if(tokens[p].type==261&&tokens[q].type==262)
	{
		for(;i<q+1;i++)
		{
			if(tokens[i].type==5) i261++;
			if(tokens[i].type==6) i262--;
			if(i261<0&&i!=q) return false;
		}
	return true;
	}
	return false;
}
uint32_t eval(char *e,int p,int q) {
	uint32_t val1,val2,n=0;
	int i=0,op,i261=0;
	int op_type=0;
	if(p > q) {
		assert(p > q);
		/* Bad expression */
	}
	else if(p == q) { 
		/* Single token.
		 * For now this token should be a number. 
		 * Return the value of the number.
		 */
		for(i=0;tokens[p].str[i]!='\0';i++)
		{
			n=n*10+tokens[p].str[i];
		}
		return n;
		}	
	else if(check_parentheses(p, q) == true) {
		/* The expression is surrounded by a matched pair of parentheses. 
		 * If that is the case, just throw away the parentheses.
		 */
		return eval(e,p + 1, q - 1); 
	}
	else {
		for(i=p;i<q+1;i++)
		{
			if(i261==0) 
			{
				if(tokens[i].type!=264) 
				{	
					if((op_type=='+'||op_type=='-')&&(tokens[i].type==259||tokens[i].type==260))  
						continue;
					else
					{
						op=i;
						op_type=tokens[i].type;
						continue;
					}
				}
			}
		}
		val1 = eval(e,p, op - 1);
		val2 = eval(e,op + 1, q);

		switch(op_type) {
			case 257: return val1 + val2;
			case 258: return val1 - val2;
			case 259: return val1 * val2;
			case 260: return val1 / val2;
			default: assert(0);
		}
	}
	return 0;
}
uint32_t expr(char *e, bool *success) {
	int p,q;
	uint32_t sum;
	if(!make_token(e)) {
		*success = false;
		return 0;
	}
	
	/* TODO: Insert codes to evaluate the expression. */
	p=0;q=nr_token-1;
	sum=eval(e,p,q);
	panic("please implement me");
	return sum;
}

